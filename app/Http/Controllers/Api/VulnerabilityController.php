<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Vulnerability;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Auth;
use App\Http\Resources\VulnerabilityResource;
use App\Models\Admin;

class VulnerabilityController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $vulnerabilities = Vulnerability::Filter($request->query())->paginate(); 
        return VulnerabilityResource::collection($vulnerabilities);  
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $request -> validate([
            'site'=>'sometimes|required|string|max:255',
            'title'=>'sometimes|required|string|max:255',
            'type'=> 'in:critical,high,medium,low',
            'poc'=>'sometimes|required|string',
            'step_for_reduce'=>'sometimes|required|string',
            'report'=>'sometimes|required|string',
            'count'=>'required|numeric|min:0',
        ]);   
        // dd($request->all());         
        $vulnerability = array_merge([
            'user_id' => $request->user()->id,
            'site' => null,
            'title' => null,
            'poc' => null,
        ], $request->all());
        Vulnerability::create($vulnerability);

        return Response::json("Vulnerability added successfully .",201);
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        $vulnerability=Vulnerability::find($id);
        if(!$vulnerability){
            return Response::json("Not Found .",404);
        }
        return new VulnerabilityResource($vulnerability); 
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        $request -> validate([
            'site'=>'sometimes|required|string|max:255',
            'title'=>'sometimes|required|string|max:255',
            'type'=> 'in:critical,high,medium,low',
            'poc'=>'sometimes|required|string',
            'step_for_reduce'=>'sometimes|required|string',
            'report'=>'sometimes|required|string',
            'count'=>'required|numeric|min:0',
        ]);   
        $vulnerability=Vulnerability::find($id);
        if(!$vulnerability){
            return Response::json("Not Found .",404);
        }
        $vulnerability->update($request->all());
        
        return Response::json("Vulnerability Edited successfully .",201);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $vulnerability=Vulnerability::find($id);
        if(!$vulnerability){
            return Response::json("Not Found .",404);
        }
        $vulnerability->delete();       
        return response([
            'message' => 'Vulnerability deleted successfully'
        ]);
    }
}
